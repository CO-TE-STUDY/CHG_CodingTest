#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

//오른쪽 위 대각선에서부터 4방향만 체크해주면 됨
int DirX[4] = {1, 1, 1, 0};
int DirY[4] = {-1, 0, 1, 1};

vector<vector<int>> Board(20, vector<int>(20, 0));

int ResultY, ResultX, ResultDir, ResultStone;
bool IsFind = false;

//다음 조사할 지역이 바둑판을 넘지 않았는지 확인
bool IsInRange(int y, int x)
{
	if (y <= 0 || x <= 0 || x >= 20 || y >= 20)
	{
		return false;
	}
	return true;
}

//설명: 오목인지를 조사하는 재귀함수
//매개변수 dir: 전에 조사해왔던 경로
//매개변수 depth: 현재 몇번째 직선인지 확인. 6번째도 가능이라면 false 해야됨.
//매개변수 value: 현재 조사하고 있는 지점의 색
void Check(int y, int x, int dir, int depth, int stone)
{
	//IsOutLine 실행하고 다음 지점도 같은 숫자라면 다시 Check함수 실행.
	int nextY = y + DirY[dir];
	int nextX = x + DirX[dir];
	if (IsInRange(nextY, nextX))
	{
		if (Board[nextY][nextX] == stone)
		{
			//깊이가 5 미만일 때만 재귀함수 실행
			if (depth < 5) Check(nextY, nextX, dir, depth + 1, stone);
			//더 가능하긴 한데 5보다 작아서 재귀함수를 실행 못한 경우. 이 경우 아예 이 라인을 배제시키던가 해야 함. 일단 52번째 줄로 해결.
			else return;
		}

	}
	//길이가 딱 5에 맞게 끝났다면 true 반환
	if (depth == 5)
	{
		//실수한 부분: 2 2 2 2 2 2 이런식으로 6줄일 때 2번째부터 탐색한 경우 정답으로 여기는 반례가 있었음. 5칸 반대로 갔을때도 같은 돌이면 return하도록 수정.
		int tmpX = -DirX[dir];
		int tmpY = -DirY[dir];
		if (Board[y + tmpY * 5][x + tmpX * 5] == stone) return;
		ResultY = y;
		ResultX = x;
		ResultDir = dir;
		ResultStone = stone;
		IsFind = true;
	}
	//길이가 5가 아닌데 끝났다면 false 반환
	
}

int main()
{

	//바둑판 입력 받기, 처음에 0 < 19로 했다가 그냥 출력이랑 똑같이 하는거로 변경
	for (int y = 1; y < 20; y++)
	{
		for (int x = 1; x < 20; x++)
		{
			cin >> Board[y][x];
		}
	}

	//모든 지점에서 조사를 한번씩 시작해본다. 
	//하나의 지점마다 8개의 방향으로 나아갈 수 있으므로 각 방향의 다음 숫자도 똑같다면 다음 조사를 시작하는 재귀함수를 실행한다.
	for (int y = 1; y < 20; y++)
	{
		for (int x = 1; x < 20; x++)
		{
			int tmp = Board[y][x];
			if (tmp == 0) continue;
			//이 지점에 돌이 있다면 각 방향의 지점 조사
			for (int i = 0; i < 4; i++)
			{
				int nextY = y + DirY[i];
				int nextX = x + DirX[i];
				//다음 지점이 범위를 넘지 않았다면
				if (IsInRange(nextY, nextX))
				{
					//그리고 이전의 돌과 숫자가 같다면 재귀함수 실행, 현재까지 쌓인 돌은 2개이므로 depth는 2로 전달
					if (tmp == Board[nextY][nextX])
					{
						Check(nextY, nextX, i, 2, tmp);
						if (IsFind) break;
					}
				}
			}
			if (IsFind) break;
		}
		if (IsFind) break;
	}
	if (IsFind)
	{
		cout << ResultStone << endl;
		//마지막 지점에서 dir에 따라서 처음 지점 구하기
		//반대로 4만큼 올라간 값을 구해서 출력
		int tmpX = -DirX[ResultDir];
		int tmpY = -DirY[ResultDir];
		cout << ResultY + tmpY * 4 << " " << ResultX + tmpX * 4;
		
	}
	else
	{
		cout << 0;
	}
	
	return 0;
}
