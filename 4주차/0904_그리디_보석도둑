#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

pair<int, int> jewel[300001];
int Bag[300001];
priority_queue<int> pq;

int main()
{

	int n, k;
	long long result = 0;

	cin >> n >> k;
	for (int i = 0; i < n; i++)
	{
		int m, v;
		cin >> m >> v;
		jewel[i] = { m,v };
	}
	for (int i = 0; i < k; i++)
	{
		cin >> Bag[i];
	}

	sort(jewel, jewel + n);
	sort(Bag, Bag + k);

	int idx = 0;

	//우선 보석을 작은 무게부터 오름차순 정렬, 가방도 오름차순 정렬 하면 한번만 훑어도 해당 가방에 넣을 수 있는 
	//하나의 가방에 넣을 수 있는 모든 보석의 가치 우선순위 큐에 넣고. 해당 가방에 넣을 수 있는 보석의 최대 가치 하나만 뽑아서 넣는다.

	for (int i = 0; i < k; i++)
	{
		//작은거부터 계산하면 다음 i번째 가방은 이전 보석들을 전부 담을 수 있는거니까 다시 탐색할 필요가 없다.
		while (idx < n && Bag[i] >= jewel[idx].first)
		{
			pq.push(jewel[idx].second);
			idx++;
			
		}
		//i번째 가방에 담을 수 있는 모든 보석을 찾았다면 top 하나만 결과에 추가
		if (!pq.empty())
		{
			result += pq.top();
			pq.pop();
		}
	}
	cout << result;

	

	return 0;
}
