#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int maindfdf(void)
{
	int n, c, num, st, router, start, end, mid, ans = 0;
	cin >> n >> c;
	vector<int> pos;
	for (int i = 0; i < n; i++)
	{
		cin >> num;
		pos.push_back(num);
	}
	sort(pos.begin(), pos.end());
	//이거를 0으로 하면 안되는 이유: 문제에 같은 좌표를 가진 집은 없다고 나옴. 문제 확인 잘 해야 됨
	start = 1;                             
	end = pos[n - 1] - pos[0];             

	while (start <= end)
	{
		router = 1;
		mid = (start + end) / 2;
		st = pos[0];

		for (int i = 1; i < n; i++)
		{
			if (pos[i] - st >= mid)
			{
				router++;
				st = pos[i];
			}
		}

		if (router >= c)
		{
			ans = max(ans, mid);
			start = mid + 1;
		}
		else
		{
			if (ans != 0)
			{
				cout << ans;
				return 0;
			}
			end = mid - 1;
			//이걸 0이 아니면 끝내려는 생각을 했다는게 틀림.
			//왜냐면 0이 아니더라도 end = mid - 1이라는 이 과정은 더 큰 숫자를 찾기 위한 과정일 수 있다..
			/*if (ans == 0)
			{
				
			}
			else break;*/
		}
			
	}
	cout << ans;
	return 0;
}
