#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

vector<pair<int, int>> v;
int n;

bool cmp(pair<int, int> a, pair<int, int> b) {
	return a.first > b.first;
}

int main() {


	ios::sync_with_stdio(0);
	cin.tie(0);


	cin >> n;

	for (int i = 0; i < n; i++) {
		int a, b;
		cin >> a >> b;
		v.push_back(make_pair(a, b));
		v[i].first--;
	}

	sort(v.begin(), v.end(),cmp);

	long long sum = 0;
	priority_queue<int> pq;

  //실수한 이유: 데드라인 별로 하나만 할 수 있는 줄 알았고 테스트 케이스도 그렇게 나왔다.
	//근데 그게 아니라 5초가 데드라인인 문제가 있으면 3, 4초에 풀 수 있는 거임.
	for (int i=n-1,j=0;i>=0;i--) {

		while (j < n&& i== v[j].first) {
			pq.push(v[j].second);
			j++;
		}
	
		if (!pq.empty()) {
			sum += pq.top();
			pq.pop();
		}
	
	}

	cout << sum;
	return 0;
}

